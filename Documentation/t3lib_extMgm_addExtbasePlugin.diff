--- typo3_src-trunk.orig/t3lib/class.t3lib_extmgm.php	2009-04-16 17:41:01.000000000 +0200
+++ typo3_src-trunk/t3lib/class.t3lib_extmgm.php	2009-04-16 17:32:25.000000000 +0200
@@ -994,7 +994,7 @@
 
 			// General plugin:
 		$pluginContent = trim('
-plugin.'.$cN.$prefix.' = USER' . ($cached ? '' : '_INT') . '
+plugin.'.$cN.$prefix.' = ' . ($cached ? 'USER' : 'USER_INT') . '
 plugin.'.$cN.$prefix.' {
   includeLibs = '.$TYPO3_LOADED_EXT[$key]['siteRelPath'].$classFile.'
   userFunc = '.$cN.$prefix.'->main
@@ -1042,6 +1042,121 @@
 	}
 
 	/**
+	 * Add an Extbase PlugIn to TypoScript
+	 *
+	 * When adding a frontend plugin you will have to add both an entry to the TCA definition 
+	 * of tt_content table AND to the TypoScript template which must initiate the rendering.
+	 * Since the static template with uid 43 is the "content.default" and practically always 
+	 * used for rendering the content elements it's very useful to have this function automatically 
+	 * adding the necessary TypoScript for calling your plugin. It will also work for the 
+	 * extension "css_styled_content"
+	 * FOR USE IN ext_locallang.php FILES
+	 * Usage: 2
+	 *
+	 * @param	string		$pluginKey must be a unique id for your plugin in lower_underscore (the string length of the extension key added to the length of the plugin key should be less than 32!)
+	 * @param	string		$extensionKEy is the extension key in lower_underscore (available in $_EXTKEY)
+	 * @param	string		$controllerActions is an array of allowed combinations of controller and action stored in an array (controller name as key and a comma separated list of action names as value)
+	 * @param	string		$nonCachableControllerActions is an optional array of controller name and  action names which should not be cached (array as defined in $controllerActions)
+	 * @param	string		$defaultControllerAction is an optional array controller name (as array key) and action name (as array value) that should be called as default
+	 * @return	void
+	 */
+	// TODO tt_content field 'list_type' should be enabled to hold at least 128 characters
+	public static function addExtbasePlugin($pluginKey, $extensionKey, array $controllerActions = array(), array $nonCachableControllerActions = array(), $defaultControllerAction = NULL) {
+		if (empty($pluginKey)) {
+			throw new InvalidArgumentException('The plugin key must not be empty', 1239891987);
+		}
+		if (empty($extensionKey) || preg_match('/[^_a-z0-9]/', $extensionKey) === 1) {
+			throw new InvalidArgumentException('The extension key was invalid (must not be empty and must match [_a-z0-9])', 1239891989);
+		}
+		$extensionName = str_replace(' ', '', ucwords(str_replace('_', ' ', strtolower($extensionKey))));
+
+		$controllerCounter = 1;
+		$hasMultipleActionsCounter = 0;
+		$controllers = '';
+		foreach ($controllerActions as $controller => $actionsList) {
+			$controllers .= '
+		' . $controllerCounter . '.controller = ' . $controller . '
+		' . $controllerCounter . '.actions = ' . $actionsList;
+			$controllerCounter++;
+			if (strpos($actionsList, ',') !== FALSE) {
+				$hasMultipleActionsCounter++;
+			}
+		}
+		if ($hasMultipleActionsCounter > 0) {
+				$switchableControllerActions = '
+	switchableControllerActions {' . $controllers . '
+	}';
+		} else {
+			$switchableControllerActions = '';
+		}
+		
+		reset($controllerActions);
+		if ($defaultControllerAction !== NULL) {
+			$defaultController = key($defaultControllerAction);
+			$controller = '
+	controller = ' . $defaultController;
+			$defaultAction = current($defaultControllerAction);
+			$action = '
+	action = ' . $defaultAction;
+		} elseif (!empty($controllerActions)) {
+			$defaultController = key($controllerActions);
+			$controller = '
+	controller = ' . $defaultController;
+			$defaultAction = array_shift(t3lib_div::trimExplode(',', current($controllerActions)));
+			$action = '
+	action = ' . $defaultAction;
+		} else {
+			$defaultController = NULL;
+			$controller = '';
+			$defaultAction = NULL;
+			$action = '';
+		}
+
+		if (!empty($nonCachableControllerActions[$defaultController])) {
+			$nonCachableActions = t3lib_div::trimExplode(',', $nonCachableControllerActions[$defaultController]);
+		} else {
+			$nonCachableActions = array();
+		}
+		$cachableActions = array_diff(t3lib_div::trimExplode(',', $controllerActions[$defaultController]), $nonCachableActions);
+		$contentObjectType = in_array($defaultAction, $nonCachableActions) ? 'USER_INT' : 'USER';
+
+		$conditions = '';
+		foreach ($controllerActions as $controllerName => $actionsList) {
+			if (!empty($nonCachableControllerActions[$controllerName])) {
+				$nonCachableActions = t3lib_div::trimExplode(',', $nonCachableControllerActions[$controllerName]);
+				$cachableActions = array_diff(t3lib_div::trimExplode(',', $controllerActions[$controllerName]), $nonCachableActions);
+				if ((($contentObjectType === 'USER') && (count($nonCachableActions) !== 0)) || (($contentObjectType === 'USER_INT') && (count($cachableActions) !== 0))) {
+					$conditions .= '
+[globalString: GP = tx_' . strtolower($extensionName) . '_' . strtolower($pluginKey) . '|controller = ' . $controllerName . '] && [globalString: GP = tx_' . strtolower($extensionName) . '_' . strtolower($pluginKey) . '|action = /' . implode('|', $contentObjectType === 'USER' ? $nonCachableActions : $cachableActions) . '/]
+tt_content.list.20.' . strtolower($extensionKey) . '_' . strtolower($pluginKey) . ' = ' . ($contentObjectType === 'USER' ? 'USER_INT' : 'USER') . '
+[global]
+';
+				}
+			}
+		}
+		
+		$pluginContent = trim('
+includeLibs.tx_extbase_dispatcher = EXT:extbase/class.tx_extbase_dispatcher.php
+
+tt_content.list.20.' . strtolower($extensionKey) . '_' . strtolower($pluginKey) . ' = ' . $contentObjectType . '
+tt_content.list.20.' . strtolower($extensionKey) . '_' . strtolower($pluginKey) . ' {
+	userFunc = tx_extbase_dispatcher->dispatch
+	pluginKey = ' . $pluginKey . '
+	extensionName = ' . $extensionName .
+	$controller .
+	$action . 
+	$switchableControllerActions . '
+}
+' . $conditions);
+
+syslog(LOG_ERR, $pluginContent);
+
+		t3lib_extMgm::addTypoScript($extensionKey, 'setup', '
+# Setting ' . $extensionKey . ' plugin TypoScript
+' . $pluginContent, 43);
+	}
+
+	/**
 	 * Call this method to add an entry in the static template list found in sys_templates
 	 * "static template files" are the modern equalent (provided from extensions) to the traditional records in "static_templates"
 	 * FOR USE IN ext_localconf.php FILES
